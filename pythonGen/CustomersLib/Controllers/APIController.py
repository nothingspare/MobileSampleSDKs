'''
CustomersLib

This file was automatically generated by APIMATIC BETA v2.0 on 09/17/2014
'''
import unirest
from APIHelper import *
from Configuration import *
from APIException import *

class APIController:

    def GetCustomers(self,
                filter = None):
        '''
        Get zero or more objects from table Customers

        :param filter: Optional Arbitrary search criteria 
        :type filter: string|null
        :returns: response from the API call
        :rType: CustomersModel 
        '''
    
        #prepare query string for API call
        queryBuilder = Configuration.BASEURI + "/Customers"

        #process optional query parameters
        queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder,{
                     "filter": filter ,
            })

        #validate and preprocess url
        queryUrl = APIHelper.cleanUrl(queryBuilder)

        #prepare headers
        headers = {
            "User-Agent" : "APIMATIC 2.0",
            "Accept" : "application/json",
        }

        #prepare and invoke the API call request to fetch the response
        response = unirest.get(queryUrl, headers=headers)

        #Error handling using HTTP status codes
        if response.code < 200 and response.code > 206: #200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code)     

        return response.body

    def postInsertCustomers(self,):
        '''
        Insert one or more objects

        :returns: response from the API call
        :rType: CustomersModel 
        '''
    
        #prepare query string for API call
        queryBuilder = Configuration.BASEURI + "/Customers"

        #validate and preprocess url
        queryUrl = APIHelper.cleanUrl(queryBuilder)

        #prepare headers
        headers = {
            "User-Agent" : "APIMATIC 2.0",
            "Accept" : "application/json",
        }

        #prepare and invoke the API call request to fetch the response
        response = unirest.post(queryUrl, headers=headers)

        #Error handling using HTTP status codes
        if response.code < 200 and response.code > 206: #200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code)     

        return response.body

    def putUpdateCustomers(self,):
        '''
        Update one or more objects

        :returns: response from the API call
        :rType: CustomersModel 
        '''
    
        #prepare query string for API call
        queryBuilder = Configuration.BASEURI + "/Customers"

        #validate and preprocess url
        queryUrl = APIHelper.cleanUrl(queryBuilder)

        #prepare headers
        headers = {
            "User-Agent" : "APIMATIC 2.0",
            "Accept" : "application/json",
        }

        #prepare and invoke the API call request to fetch the response
        response = unirest.put(queryUrl, headers=headers)

        #Error handling using HTTP status codes
        if response.code < 200 and response.code > 206: #200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code)     

        return response.body

    def GetOneCustomers(self,
                pk):
        '''
        Get one object

        :param pk: Required CustomerID 
        :type pk: string
        :returns: response from the API call
        :rType: CustomersModel 
        '''
    
        #prepare query string for API call
        queryBuilder = Configuration.BASEURI + "/Customers/{pk}"

        #process optional query parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, { 
                     "pk": pk ,
            })

        #validate and preprocess url
        queryUrl = APIHelper.cleanUrl(queryBuilder)

        #prepare headers
        headers = {
            "User-Agent" : "APIMATIC 2.0",
            "Accept" : "application/json",
        }

        #prepare and invoke the API call request to fetch the response
        response = unirest.get(queryUrl, headers=headers)

        #Error handling using HTTP status codes
        if response.code < 200 and response.code > 206: #200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code)     

        return response.body

    def putUpdateOneCustomers(self,
                pk):
        '''
        Update one object

        :param pk: Required CustomerID 
        :type pk: string
        :returns: response from the API call
        :rType: CustomersModel 
        '''
    
        #prepare query string for API call
        queryBuilder = Configuration.BASEURI + "/Customers/{pk}"

        #process optional query parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, { 
                     "pk": pk ,
            })

        #validate and preprocess url
        queryUrl = APIHelper.cleanUrl(queryBuilder)

        #prepare headers
        headers = {
            "User-Agent" : "APIMATIC 2.0",
            "Accept" : "application/json",
        }

        #prepare and invoke the API call request to fetch the response
        response = unirest.put(queryUrl, headers=headers)

        #Error handling using HTTP status codes
        if response.code < 200 and response.code > 206: #200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code)     

        return response.body

    def DeleteOneCustomers(self,
                pk):
        '''
        Delete one object

        :param pk: Required CustomerID 
        :type pk: string
        :returns: response from the API call
        :rType: CustomersModel 
        '''
    
        #prepare query string for API call
        queryBuilder = Configuration.BASEURI + "/Customers/{pk}"

        #process optional query parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, { 
                     "pk": pk ,
            })

        #validate and preprocess url
        queryUrl = APIHelper.cleanUrl(queryBuilder)

        #prepare headers
        headers = {
            "User-Agent" : "APIMATIC 2.0",
            "Accept" : "application/json",
        }

        #prepare and invoke the API call request to fetch the response
        response = unirest.delete(queryUrl, headers=headers)

        #Error handling using HTTP status codes
        if response.code < 200 and response.code > 206: #200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code)     

        return response.body
