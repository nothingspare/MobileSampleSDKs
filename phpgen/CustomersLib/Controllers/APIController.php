<?php
/*
 * CustomersLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 09/17/2014
 */

class APIController {
    /**
     * Get zero or more objects from table Customers
     * @param   string|null $filter    Optional parameter: Arbitrary search criteria
     * @return CustomersModel response from the API call*/
    public function GetCustomers (
                $filter = NULL) 
    {
        //prepare query string for API call
        $queryBuilder = Configuration::BASEURI."/Customers";

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            "filter" => $filter,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            "User-Agent" => @"APIMATIC 2.0",
            "Accept" => "application/json"
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * Insert one or more objects
     * @return CustomersModel response from the API call*/
    public function postInsertCustomers () 
    {
        //prepare query string for API call
        $queryBuilder = Configuration::BASEURI."/Customers";

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            "User-Agent" => @"APIMATIC 2.0",
            "Accept" => "application/json"
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * Update one or more objects
     * @return CustomersModel response from the API call*/
    public function putUpdateCustomers () 
    {
        //prepare query string for API call
        $queryBuilder = Configuration::BASEURI."/Customers";

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            "User-Agent" => @"APIMATIC 2.0",
            "Accept" => "application/json"
        );

        //prepare API request
        $request = Unirest::put($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * Get one object
     * @param   string $pk    Required parameter: CustomerID
     * @return CustomersModel response from the API call*/
    public function GetOneCustomers (
                $pk) 
    {
        //prepare query string for API call
        $queryBuilder = Configuration::BASEURI."/Customers/{pk}";

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            "pk" => $pk,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            "User-Agent" => @"APIMATIC 2.0",
            "Accept" => "application/json"
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * Update one object
     * @param   string $pk    Required parameter: CustomerID
     * @return CustomersModel response from the API call*/
    public function putUpdateOneCustomers (
                $pk) 
    {
        //prepare query string for API call
        $queryBuilder = Configuration::BASEURI."/Customers/{pk}";

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            "pk" => $pk,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            "User-Agent" => @"APIMATIC 2.0",
            "Accept" => "application/json"
        );

        //prepare API request
        $request = Unirest::put($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * Delete one object
     * @param   string $pk    Required parameter: CustomerID
     * @return CustomersModel response from the API call*/
    public function DeleteOneCustomers (
                $pk) 
    {
        //prepare query string for API call
        $queryBuilder = Configuration::BASEURI."/Customers/{pk}";

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            "pk" => $pk,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            "User-Agent" => @"APIMATIC 2.0",
            "Accept" => "application/json"
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
}