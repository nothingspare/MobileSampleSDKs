/*
 * Customers.PCL
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 09/17/2014
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using unirest_net.http;
using unirest_net.request;
using Customers.PCL;
using Customers.PCL.Models;

namespace Customers.PCL.Controllers
{
    public class APIController
    {
        /// <summary>
        /// Get zero or more objects from table Customers
        /// </summary>
        /// <param name="filter">Optional parameter: Arbitrary search criteria</param>
        /// <return>Returns the CustomersModel response from the API call</return>
        public async Task<CustomersModel> GetCustomersAsync(
                string filter = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/Customers");


            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "filter", filter }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json");

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<CustomersModel>(response.Body);
        }

        /// <summary>
        /// Insert one or more objects
        /// </summary>
        /// <return>Returns the CustomersModel response from the API call</return>
        public async Task<CustomersModel> PostInsertCustomersAsync()
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/Customers");


            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.post(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json");

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<CustomersModel>(response.Body);
        }

        /// <summary>
        /// Update one or more objects
        /// </summary>
        /// <return>Returns the CustomersModel response from the API call</return>
        public async Task<CustomersModel> PutUpdateCustomersAsync()
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/Customers");


            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.put(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json");

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<CustomersModel>(response.Body);
        }

        /// <summary>
        /// Get one object
        /// </summary>
        /// <param name="pk">Required parameter: CustomerID</param>
        /// <return>Returns the CustomersModel response from the API call</return>
        public async Task<CustomersModel> GetOneCustomersAsync(
                string pk)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/Customers/{pk}");

            //process optional query parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "pk", pk }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json");

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<CustomersModel>(response.Body);
        }

        /// <summary>
        /// Update one object
        /// </summary>
        /// <param name="pk">Required parameter: CustomerID</param>
        /// <return>Returns the CustomersModel response from the API call</return>
        public async Task<CustomersModel> PutUpdateOneCustomersAsync(
                string pk)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/Customers/{pk}");

            //process optional query parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "pk", pk }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.put(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json");

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<CustomersModel>(response.Body);
        }

        /// <summary>
        /// Delete one object
        /// </summary>
        /// <param name="pk">Required parameter: CustomerID</param>
        /// <return>Returns the CustomersModel response from the API call</return>
        public async Task<CustomersModel> DeleteOneCustomersAsync(
                string pk)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/Customers/{pk}");

            //process optional query parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "pk", pk }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.delete(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json");

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<CustomersModel>(response.Body);
        }

    }
} 