//
//  APIController.m
//  Customers
//
//  This file was automatically generated by APIMATIC BETA v2.0 on 09/17/2014
//
#import "APIController.h"

@implementation APIController
/**
* Get zero or more objects from table Customers
* @param    filter    Optional parameter: Arbitrary search criteria
* @return	Returns the CustomersModel* response from the API call */
- (void) GetCustomersAsyncWithFilter:(NSString*) filter
                completionBlock:(CompletedGetCustomers) onCompleted
{
    //the base uri for api requests
    NSString* baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* queryBuilder = [NSMutableString stringWithString: baseUri]; 
    [queryBuilder appendString: @"/Customers"];

    //process optional query parameters
    [APIHelper appendUrl: queryBuilder withQueryParameters: @{
                    @"filter": filter
                }];

    //validate and preprocess url
    NSString* queryUrl = [APIHelper cleanUrl: queryBuilder];

    //preparing request headers
    NSMutableDictionary* headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"User-Agent": @"APIMATIC 2.0",
        @"Accept": @"application/json"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: headers];


    //prepare the request and fetch response  
    UNIHTTPRequest* request = [UNIRest get: ^(UNISimpleRequest* request) 
    { 
        [request setUrl: queryUrl]; //set request url        
        [request setHeaders: headers]; //set request headers

    }];

    //invoke request and get response
    [request asStringAsync:
        ^(UNIHTTPStringResponse *response, NSError *error) {
            if (nil == error) {

                //Error handling using HTTP status codes
                if((response.code < 200) || (response.code > 206)) //[200,206] = HTTP OK
                    @throw [[APIException alloc] initWithName: @"APIException"
                                                    andReason: @"HTTP Response Not OK"
                                                      andCode: response.code];
                //prase/deserialize respose and return to API caller
                CustomersModel* result = (CustomersModel*) [APIHelper jsonDeserialize: response.body
                toClass: CustomersModel.class];

                //announce completion with success
                onCompleted(YES, result, nil);
            }
            else {
                onCompleted(NO, nil, error);
            }
    }];

}

/**
* Insert one or more objects
* @return	Returns the CustomersModel* response from the API call */
- (void) postInsertCustomersWithCompletionBlock:(CompletedPostInsertCustomers) onCompleted
{
    //the base uri for api requests
    NSString* baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* queryBuilder = [NSMutableString stringWithString: baseUri]; 
    [queryBuilder appendString: @"/Customers"];

    //validate and preprocess url
    NSString* queryUrl = [APIHelper cleanUrl: queryBuilder];

    //preparing request headers
    NSMutableDictionary* headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"User-Agent": @"APIMATIC 2.0",
        @"Accept": @"application/json"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: headers];


    //prepare the request and fetch response  
    UNIHTTPRequest* request = [UNIRest post: ^(UNISimpleRequest* request) 
    { 
        [request setUrl: queryUrl]; //set request url        
        [request setHeaders: headers]; //set request headers

    }];

    //invoke request and get response
    [request asStringAsync:
        ^(UNIHTTPStringResponse *response, NSError *error) {
            if (nil == error) {

                //Error handling using HTTP status codes
                if((response.code < 200) || (response.code > 206)) //[200,206] = HTTP OK
                    @throw [[APIException alloc] initWithName: @"APIException"
                                                    andReason: @"HTTP Response Not OK"
                                                      andCode: response.code];
                //prase/deserialize respose and return to API caller
                CustomersModel* result = (CustomersModel*) [APIHelper jsonDeserialize: response.body
                toClass: CustomersModel.class];

                //announce completion with success
                onCompleted(YES, result, nil);
            }
            else {
                onCompleted(NO, nil, error);
            }
    }];

}

/**
* Update one or more objects
* @return	Returns the CustomersModel* response from the API call */
- (void) putUpdateCustomersWithCompletionBlock:(CompletedPutUpdateCustomers) onCompleted
{
    //the base uri for api requests
    NSString* baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* queryBuilder = [NSMutableString stringWithString: baseUri]; 
    [queryBuilder appendString: @"/Customers"];

    //validate and preprocess url
    NSString* queryUrl = [APIHelper cleanUrl: queryBuilder];

    //preparing request headers
    NSMutableDictionary* headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"User-Agent": @"APIMATIC 2.0",
        @"Accept": @"application/json"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: headers];


    //prepare the request and fetch response  
    UNIHTTPRequest* request = [UNIRest put: ^(UNISimpleRequest* request) 
    { 
        [request setUrl: queryUrl]; //set request url        
        [request setHeaders: headers]; //set request headers

    }];

    //invoke request and get response
    [request asStringAsync:
        ^(UNIHTTPStringResponse *response, NSError *error) {
            if (nil == error) {

                //Error handling using HTTP status codes
                if((response.code < 200) || (response.code > 206)) //[200,206] = HTTP OK
                    @throw [[APIException alloc] initWithName: @"APIException"
                                                    andReason: @"HTTP Response Not OK"
                                                      andCode: response.code];
                //prase/deserialize respose and return to API caller
                CustomersModel* result = (CustomersModel*) [APIHelper jsonDeserialize: response.body
                toClass: CustomersModel.class];

                //announce completion with success
                onCompleted(YES, result, nil);
            }
            else {
                onCompleted(NO, nil, error);
            }
    }];

}

/**
* Get one object
* @param    pk    Required parameter: CustomerID
* @return	Returns the CustomersModel* response from the API call */
- (void) GetOneCustomersAsyncWithPk:(NSString*) pk
                completionBlock:(CompletedGetOneCustomers) onCompleted
{
    //the base uri for api requests
    NSString* baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* queryBuilder = [NSMutableString stringWithString: baseUri]; 
    [queryBuilder appendString: @"/Customers/{pk}"];

    //process optional query parameters
    [APIHelper appendUrl: queryBuilder withTemplateParameters: @{
                    @"pk": pk
                }];

    //validate and preprocess url
    NSString* queryUrl = [APIHelper cleanUrl: queryBuilder];

    //preparing request headers
    NSMutableDictionary* headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"User-Agent": @"APIMATIC 2.0",
        @"Accept": @"application/json"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: headers];


    //prepare the request and fetch response  
    UNIHTTPRequest* request = [UNIRest get: ^(UNISimpleRequest* request) 
    { 
        [request setUrl: queryUrl]; //set request url        
        [request setHeaders: headers]; //set request headers

    }];

    //invoke request and get response
    [request asStringAsync:
        ^(UNIHTTPStringResponse *response, NSError *error) {
            if (nil == error) {

                //Error handling using HTTP status codes
                if((response.code < 200) || (response.code > 206)) //[200,206] = HTTP OK
                    @throw [[APIException alloc] initWithName: @"APIException"
                                                    andReason: @"HTTP Response Not OK"
                                                      andCode: response.code];
                //prase/deserialize respose and return to API caller
                CustomersModel* result = (CustomersModel*) [APIHelper jsonDeserialize: response.body
                toClass: CustomersModel.class];

                //announce completion with success
                onCompleted(YES, result, nil);
            }
            else {
                onCompleted(NO, nil, error);
            }
    }];

}

/**
* Update one object
* @param    pk    Required parameter: CustomerID
* @return	Returns the CustomersModel* response from the API call */
- (void) putUpdateOneCustomersAsyncWithPk:(NSString*) pk
                completionBlock:(CompletedPutUpdateOneCustomers) onCompleted
{
    //the base uri for api requests
    NSString* baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* queryBuilder = [NSMutableString stringWithString: baseUri]; 
    [queryBuilder appendString: @"/Customers/{pk}"];

    //process optional query parameters
    [APIHelper appendUrl: queryBuilder withTemplateParameters: @{
                    @"pk": pk
                }];

    //validate and preprocess url
    NSString* queryUrl = [APIHelper cleanUrl: queryBuilder];

    //preparing request headers
    NSMutableDictionary* headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"User-Agent": @"APIMATIC 2.0",
        @"Accept": @"application/json"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: headers];


    //prepare the request and fetch response  
    UNIHTTPRequest* request = [UNIRest put: ^(UNISimpleRequest* request) 
    { 
        [request setUrl: queryUrl]; //set request url        
        [request setHeaders: headers]; //set request headers

    }];

    //invoke request and get response
    [request asStringAsync:
        ^(UNIHTTPStringResponse *response, NSError *error) {
            if (nil == error) {

                //Error handling using HTTP status codes
                if((response.code < 200) || (response.code > 206)) //[200,206] = HTTP OK
                    @throw [[APIException alloc] initWithName: @"APIException"
                                                    andReason: @"HTTP Response Not OK"
                                                      andCode: response.code];
                //prase/deserialize respose and return to API caller
                CustomersModel* result = (CustomersModel*) [APIHelper jsonDeserialize: response.body
                toClass: CustomersModel.class];

                //announce completion with success
                onCompleted(YES, result, nil);
            }
            else {
                onCompleted(NO, nil, error);
            }
    }];

}

/**
* Delete one object
* @param    pk    Required parameter: CustomerID
* @return	Returns the CustomersModel* response from the API call */
- (void) DeleteOneCustomersAsyncWithPk:(NSString*) pk
                completionBlock:(CompletedDeleteOneCustomers) onCompleted
{
    //the base uri for api requests
    NSString* baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* queryBuilder = [NSMutableString stringWithString: baseUri]; 
    [queryBuilder appendString: @"/Customers/{pk}"];

    //process optional query parameters
    [APIHelper appendUrl: queryBuilder withTemplateParameters: @{
                    @"pk": pk
                }];

    //validate and preprocess url
    NSString* queryUrl = [APIHelper cleanUrl: queryBuilder];

    //preparing request headers
    NSMutableDictionary* headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"User-Agent": @"APIMATIC 2.0",
        @"Accept": @"application/json"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: headers];


    //prepare the request and fetch response  
    UNIHTTPRequest* request = [UNIRest delete: ^(UNISimpleRequest* request) 
    { 
        [request setUrl: queryUrl]; //set request url        
        [request setHeaders: headers]; //set request headers

    }];

    //invoke request and get response
    [request asStringAsync:
        ^(UNIHTTPStringResponse *response, NSError *error) {
            if (nil == error) {

                //Error handling using HTTP status codes
                if((response.code < 200) || (response.code > 206)) //[200,206] = HTTP OK
                    @throw [[APIException alloc] initWithName: @"APIException"
                                                    andReason: @"HTTP Response Not OK"
                                                      andCode: response.code];
                //prase/deserialize respose and return to API caller
                CustomersModel* result = (CustomersModel*) [APIHelper jsonDeserialize: response.body
                toClass: CustomersModel.class];

                //announce completion with success
                onCompleted(YES, result, nil);
            }
            else {
                onCompleted(NO, nil, error);
            }
    }];

}


@end