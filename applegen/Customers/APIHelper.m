//
//  APIHelper.m
//  Customers
//
//  This file was automatically generated by APIMATIC BETA v2.0 on 09/17/2014
//
#import "APIHelper.h"

@implementation APIHelper

/**
* JSON Serialization of a given object.
* @param	obj		The object to serialize into JSON
* @return	The	serialized Json string representation of the given object */
+ (NSString*) jsonSerialize: (JSONModel*) obj
{
    if(nil == obj)
	    return nil;

    return [obj toJSONString];
}

/**
* JSON Deserialization of the given json string.
* @param	json	The json string to deserialize
* @param	cls		The type of the object to desialize into
* @return	The deserialized object */
+ (JSONModel*) jsonDeserialize: (NSString*) json
                       toClass: (Class) cls
{
    NSError* err = nil;
    JSONModel* model = [[cls alloc] initWithString: json 
                                             error: &err];
    return model;
}

/**
 * JSON Deserialization of the given json string.into an array of json objects
 * @param	json	The json string to deserialize
 * @return	The deserialized array of json objects */
+ (NSArray*) jsonDeserializeArray: (NSString*) json
{
    NSError* err = nil;
    NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
    NSArray* jsonObjects = [NSJSONSerialization 
                                JSONObjectWithData: jsonData
                                           options: NSJSONReadingAllowFragments|NSJSONReadingMutableContainers
                                             error: &err];
    
    return jsonObjects;
}

/**
* Replaces template parameters in the given url
* @param	queryBuilder    The query string builder to replace the template parameters
* @param	parameters	The parameters to replace in the url */
+ (void) appendUrl: (NSMutableString*) queryBuilder
         withTemplateParameters: (NSDictionary*) parameters
{
    //perform parameter validation
    if ([APIHelper isNullOrWhiteSpace: queryBuilder])
        @throw([NSException exceptionWithName: @"IllegalArgumentException"
                                       reason: @"The given parameter value for \"queryUrl\" is invalid"
                                     userInfo: nil]);

    if (nil == parameters)
        return;

    //iterate and append parameters
    NSEnumerator* enumerator = [parameters keyEnumerator];
    NSString* key;
    while (key = [enumerator nextObject])
    {		
        NSMutableString* replaceValue = [[NSMutableString alloc] init];
        NSObject* value = [parameters objectForKey:key];
        if ((nil == value) || ([NSNull null] == value))
            [replaceValue setString: @""];
        else            
			replaceValue = [NSMutableString stringWithFormat: @"%@", value];

        //find the template parameter and replace it with its value
        [queryBuilder replaceOccurrencesOfString: [NSString stringWithFormat: @"{%@}", key] 
                                      withString: replaceValue
									  options: NSCaseInsensitiveSearch
									  range: NSMakeRange(0, [queryBuilder length])];
    }
}

/**
* Appends the given set of parameters to the given query string
* @param	queryBuilder	The query url string to append the parameters
* @param	parameters	The parameters to append */
+ (void) appendUrl: (NSMutableString*) queryBuilder
         withQueryParameters: (NSDictionary*) parameters
{
    //perform parameter validation
    if ([APIHelper isNullOrWhiteSpace: queryBuilder])
        @throw([NSException exceptionWithName: @"IllegalArgumentException"
                                       reason: @"The given parameter value for \"queryUrl\" is invalid"
                                     userInfo: nil]);
    
    if (nil == parameters)
        return;
    
    //does the query string already has parameters
    BOOL hasParams = ([self indexOf: @"?" in: queryBuilder] > 0);

    //iterate and append parameters
    NSEnumerator* enumerator = [parameters keyEnumerator];
    NSString* key;
    while (key = [enumerator nextObject])
    {
        NSObject* value = [parameters objectForKey:key];
        if ((nil == value) || ([NSNull null] == value))
            continue;

        //if already has parameters, use the &amp; to append new parameters
        char separator = (hasParams) ? '&' : '?';
        
        [queryBuilder appendFormat:@"%c%@=%@", separator, key, value];
        
        //indicate that now the query has some params
        hasParams = true;
    }
}

/**
* Validates if the string is null, empty or whitespace
* @param	str	The string to validate
* @return	The result of validation */
+ (BOOL) isNullOrWhiteSpace:(const NSString*) str
{
    if(str == nil)
        return true;
    
    NSUInteger length = [str length];
    
    if (length > 0)
    {
        for (NSInteger start = 0, middle = length / 2, end = length - 1; start <= middle; start++, end--)
        {
            if (([str characterAtIndex: start]) > ' ' || ([str characterAtIndex: end]) > ' ')
            {
                return false;
            }
        }
        return true;
    }
    return false;
}
 
/**
* Finds the index of a given string from a larger string
* @param	strFind	The string to find index of
* @param	strData	The string to find index from
* @return	The result of validation */                     
+ (NSInteger) indexOf: (NSString*) strFind
                   in:(NSString*) strData
{
    NSRange range = [strData rangeOfString:strFind];
	if(0 == range.length)
		return -1;
    return range.location;
}

/**
* Validates and processes the given Url
* @param    url The given Url to process
* @return   Pre-process Url as string */
+(NSString*) cleanUrl: (NSString*) url
{
    NSError* err = nil;

    //regex to load query from url
    NSRegularExpression *queryRegex = [NSRegularExpression 
                                            regularExpressionWithPattern: @"//+" 
                                                                 options: NSRegularExpressionCaseInsensitive 
                                                                   error: &err];
    //replace string using regex matches
    return [queryRegex stringByReplacingMatchesInString: url
                                                options: 0 
                                                  range: NSMakeRange(7, [url length] - 7) 
                                           withTemplate: @"/"];
}

/**
 * Removes any NSNull value from the given dictionary
 * @param    url The given Url to process */
+(void) removeNullValues: (NSMutableDictionary*) dictionary
{
    NSArray* keys = [dictionary allKeys];
    for (id key in keys)
    {
        id value = [dictionary objectForKey: key];
        if([NSNull null] == value)
        {
            [dictionary removeObjectForKey: key];
        }
    }
}

@end